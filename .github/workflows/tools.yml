name: EC2 DevOps Setup Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  setup-ec2:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Prepare SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > ~/.ssh/bastion.pem
          chmod 600 ~/.ssh/bastion.pem
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts || exit 1

      - name: Setup DevOps Tools on EC2
        run: |
          ssh -i ~/.ssh/bastion.pem \
              -o StrictHostKeyChecking=yes \
              -o ConnectTimeout=30 \
              ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} 'bash -s' <<'REMOTE'

          set -euo pipefail

          echo "=== Step 0: Wait for system updates to complete ==="
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
              echo "Waiting for automatic updates to complete..."
              sleep 10
          done

          sudo rm -f /var/lib/dpkg/lock-frontend
          sudo rm -f /var/lib/dpkg/lock
          sudo rm -f /var/cache/apt/archives/lock
          sudo dpkg --configure -a

          echo "=== Step 1: Update packages ==="
          sudo apt-get update -y || { echo "Package update failed"; exit 1; }
          sudo apt-get install -y curl unzip jq git ca-certificates gnupg lsb-release wget || { echo "Package installation failed"; exit 1; }

          echo "=== Step 2: Install/Update AWS CLI ==="
          if ! command -v aws >/dev/null 2>&1; then
              echo "Installing AWS CLI..."
              curl -sS "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || exit 1
              unzip -oq awscliv2.zip || exit 1
              sudo ./aws/install || exit 1
              rm -rf aws awscliv2.zip
          else
              echo "Updating AWS CLI..."
              curl -sS "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" || exit 1
              unzip -oq awscliv2.zip || exit 1  
              sudo ./aws/install --update || exit 1
              rm -rf aws awscliv2.zip
          fi
          aws --version || exit 1

          echo "=== Step 3: Install/Update Docker ==="
          if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh || exit 1
              sudo sh get-docker.sh || exit 1
              sudo systemctl enable docker
              sudo systemctl start docker
              sudo usermod -aG docker $USER
              rm get-docker.sh
          else
              echo "Docker already installed"
          fi
          docker --version || echo "Docker installed, requires logout/login for user permissions"

          echo "=== Step 4: Install/Update kubectl ==="
          KUBECTL_VERSION="v1.28.0"
          echo "Installing kubectl version ${KUBECTL_VERSION}..."
          curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl" || exit 1
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/ || exit 1
          kubectl version --client || exit 1

          echo "=== Step 5: Configure kubectl for EKS ==="
          echo "Configuring kubectl for EKS cluster..."
          rm -rf ~/.kube/config 2>/dev/null || true
          aws eks update-kubeconfig --region us-east-1 --name devops-cluster || exit 1
          echo "Testing cluster connection..."
          kubectl get nodes || exit 1
          echo "✅ Cluster connection successful!"

          echo "=== Step 6: Install/Update Helm ==="
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash || exit 1
          helm version || exit 1

          echo "=== Step 7: Install/Update ArgoCD CLI ==="
          echo "Installing ArgoCD CLI..."
          ARGOCD_VERSION="v2.8.4"
          curl -sSL -o argocd "https://github.com/argoproj/argo-cd/releases/download/${ARGOCD_VERSION}/argocd-linux-amd64" || exit 1
          chmod +x argocd
          sudo mv argocd /usr/local/bin/ || exit 1
          argocd version --client || exit 1

          echo "=== Step 8: Install Terraform ==="
          if ! command -v terraform >/dev/null 2>&1; then
              echo "Installing Terraform..."
              wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor --batch --yes -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
              echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
              sudo apt update && sudo apt install -y terraform
          else
              echo "Terraform already installed"
          fi
          terraform --version || exit 1

          echo "=== Step 9: Install eksctl ==="
          if ! command -v eksctl >/dev/null 2>&1; then
              echo "Installing eksctl..."
              curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp || exit 1
              sudo mv /tmp/eksctl /usr/local/bin || exit 1
          else
              echo "eksctl already installed"
          fi
          eksctl version || exit 1

          echo "=== Step 10: Install Kubernetes Components ==="
          if kubectl cluster-info >/dev/null 2>&1; then
              echo "✅ Installing NGINX Ingress Controller..."
              kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f - || exit 1
              helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx || exit 1
              helm repo update || exit 1
              helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
                -n ingress-nginx \
                --set controller.service.type=LoadBalancer \
                --wait --timeout=300s || exit 1

              echo "✅ Installing Prometheus + Grafana..."
              kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f - || exit 1
              helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || exit 1
              helm repo update || exit 1
              helm upgrade --install kube-stack prometheus-community/kube-prometheus-stack \
                -n monitoring \
                --set grafana.service.type=LoadBalancer \
                --wait --timeout=600s || exit 1

              echo "✅ Installing ArgoCD on cluster..."
              kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f - || exit 1
              kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || exit 1

              echo "Waiting for deployments..."
              kubectl wait --for=condition=available --timeout=600s deployment -n argocd --all || exit 1

              echo "=== Getting Access Information ==="
              echo "Grafana Admin Password:"
              kubectl get secret --namespace monitoring kube-stack-grafana -o jsonpath="{.data.admin-password}" | base64 --decode && echo
              echo ""
              echo "ArgoCD Admin Password:"
              kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo

              echo "=== Service URLs (LoadBalancers) ==="
              kubectl get svc --all-namespaces -o wide | grep LoadBalancer
          else
              echo "❌ No Kubernetes cluster access - skipping cluster components"
          fi
          
          echo "=== DevOps Pipeline Completed Successfully ==="
          REMOTE
